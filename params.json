{"name":"Path Integral Ground State Monte Carlo","tagline":"A Fortran 90 open source code to study the properties of zero temperature many-body bulk systems using the path integral ground state Monte Carlo method","body":"# PATH INTEGRAL GROUND STATE MONTE CARLO\r\n\r\nPath integral ground state Monte Carlo (PIGS) is a quantum Monte Carlo method intended to the study of quantum many body systems at zero temperature. This method solves the many body Schr√∂dinger equation of the system by propagating an initial (or trial) wave function in imaginary time making that any non ground state contribution present in the initial guess of the wave function vanishes. The imaginary time propagation is implemented by successive application of the quantum propagator of the system. \r\n\r\n**VPI.F90**\r\n\r\nThis is the main program that contains the definitions of the variables needed to perform the simulation and the main \r\nMonte Carlo loop over blocks and steps. It also calls the routines intended to evaluate the desired observables.\r\n\r\n**GLOBAL_MOD.F90**\r\n\r\nModule that contains the definition of some global variables used along many functions of the code.\r\n\r\n**VPI_MOD.F90**\r\n\r\nThis module contains all the routines concerning the Monte Carlo movements used to sample the path integral and all the\r\nfunctions needed for the calculation. \r\n\r\n**List of functions**\r\n  \r\n    *GreenFunction\r\n    *OBDMGuess\r\n\r\n**List of routines**\r\n\r\n  Initialization routines:\r\n\r\n    * Jastrow_Table\r\n    * init\r\n    * CheckPoint\r\n  \r\n  Routines for the movement of the particles of the system\r\n\r\n    * TranslateChain\r\n    * Staging\r\n    * MoveHead\r\n    * MoveTail\r\n    * TranslateHalfChain\r\n    * StagingHalfChain\r\n    * MoveHeadHalfChain\r\n    * MoveTailHalfChain\r\n\r\n  Routines for the evaluation of quantities for Metropolis algorithm\r\n\r\n    * UpdateAction\r\n    * UpdateWf\r\n    * UpdatePot\r\n\r\n**SAMPLE_MOD.F90**\r\n\r\nThis module contains all the functions required for the evaluation of the different observable quantities.\r\n\r\n**List of functions**\r\n    \r\n    * Var\r\n\r\n**List of routines**\r\n\r\n  Routines for the evaluation of energies:\r\n\r\n    * PotentialEnergy\r\n    * LocalEnergy\r\n    * Accumulate\r\n\r\n  Routines for the evaluation of structural quantities\r\n\r\n    * PairCorrelation\r\n    * StructureFactor\r\n    * Normalize\r\n    * AccumGr\r\n    * AccumSk\r\n    * NormAvGr\r\n    * NormAvSk\r\n\r\n  Routines for the evaluation of OBDM\r\n \r\n    * OBDM\r\n    * Normalize\r\n    * AccumNr\r\n    * NormAvNr \r\n\r\n**PBC_MOD.F90**\r\n\r\nModule that contains functions to implement the periodic boundary conditions in a cubic box (independent of \r\ndimensionality).\r\n\r\n**List of routines**\r\n\r\n    * BoundaryConditions\r\n    * MinimumImage\r\n\r\n**RANDOM_MOD.F90**\r\n\r\nModule that contains the functions and routines used for the generation of random numbers: uniform and gaussian. The \r\nTwister Mersenne random number generator is used. \r\n\r\n**INTERPOLATE.F90**\r\n\r\nFunction that performs linear interpolation to find the value of a tabulated function in a given point.\r\n\r\n**R8_GAMMA.F90**\r\n\r\nGamma function needed to evaluate the volume of a spherical shell in an arbitrary dimension.\r\n\r\nThose are the generic parts of the code, in addition to this modules there are some system-dependent modules:\r\n\r\n**SYSTEM_MOD.F90**\r\n\r\nModule that contains the trial (or initial) model wave functions of the system (one and two-body terms) and the\r\npotential (also one and two-body).\r\n\r\n**BESSEL_MOD.F90**\r\n\r\nThis is a module containing the definition of Bessel functions and Modified Bessel functions of the first and second \r\nkind. This is a very specific module needed to build the two-body Jastrow factor of dipoles in two dimensions.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}